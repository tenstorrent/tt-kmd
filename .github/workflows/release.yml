name: Create Release
run-name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_string:
        description: 'The exact version to release (e.g., 2.4.0 or 2.4.0-rc1)'
        required: true
        type: string

env:
  project_name: tt-kmd
  EMAIL: releases@tenstorrent.com
  NAME: Tenstorrent Releases

jobs:
  # Create a temporary branch for version updates and changelog generation
  # This ensures all changes are atomic and can be merged back after builds complete
  create-temp-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      temp_branch_ref: ${{ steps.temp_branch_ref.outputs.temp_branch_ref }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Figure out branch name
        id: temp_branch_ref
        run: |
          export temp_branch_ref="temp_branch_ref=rc-temp-$( git rev-parse --short HEAD )-$( date +%Y.%m.%d-%H.%M.%S )"
          echo "${temp_branch_ref}"
          echo "${temp_branch_ref}" >> "$GITHUB_OUTPUT"
      - name: Create the branch
        run: git checkout -b "${{ steps.temp_branch_ref.outputs.temp_branch_ref }}"
      - name: Push the branch to work from
        run: git push --set-upstream origin ${{ steps.temp_branch_ref.outputs.temp_branch_ref }}

  versionchange:
    needs:
      - create-temp-branch
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      git_hash: ${{ steps.new-git-hash.outputs.git_hash }}
      package_name: ${{ steps.packagever.outputs.package_name }}
      package_version_new: ${{ inputs.version_string }}
      version_major: ${{ steps.version.outputs.major }}
      version_minor: ${{ steps.version.outputs.minor }}
      version_patch: ${{ steps.version.outputs.patch }}
      version_prerelease: ${{ steps.version.outputs.prerelease }}
      version_build: ${{ steps.version.outputs.build }}
      version_full: ${{ steps.version.outputs.full }}
      number_of_commits_since_tag: ${{ steps.num-commits-since-tag.outputs.num_commits_since_tag }}
    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y git-buildpackage
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
      - name: Configure Git
        run: |
          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"
      - name: Read current package name
        id: packagever
        run: |
          # Read package name from dkms.conf
          export package_name="$( grep '^PACKAGE_NAME=' dkms.conf | cut -d'=' -f2 | tr -d '"' )"
          echo "package_name=${package_name}"
          echo "package_name=${package_name}" >> "$GITHUB_OUTPUT"
      - name: Parse user-provided version string
        id: version
        uses: release-kit/semver@v2
        with:
          string: ${{ inputs.version_string }}
      - name: Find number of commits since last tag
        id: num-commits-since-tag
        run: |
          export num_commits_since="$( git rev-list $(git describe --tags --abbrev=0)..HEAD --count )"
          echo "num_commits_since_tag=${num_commits_since}"
          echo "num_commits_since_tag=${num_commits_since}" >> "$GITHUB_OUTPUT"
      - name: Update all version files
        run: |
          VERSION="${{ inputs.version_string }}"
          MAJOR="${{ steps.version.outputs.major }}"
          MINOR="${{ steps.version.outputs.minor }}"
          PATCH="${{ steps.version.outputs.patch }}"
          PRERELEASE="${{ steps.version.outputs.prerelease }}"
          
          echo "Setting version to: ${VERSION} (major=${MAJOR}, minor=${MINOR}, patch=${PATCH}, prerelease=${PRERELEASE})"
          
          # Update dkms.conf
          sed -i "s/PACKAGE_VERSION=\".*\"/PACKAGE_VERSION=\"${VERSION}\"/" dkms.conf
          
          # Update AKMBUILD
          sed -i "s/modver=.*/modver=${VERSION}/" AKMBUILD
          
          # Update module.h with version components
          sed -i \
            -e "s/#define TENSTORRENT_DRIVER_VERSION_MAJOR [0-9]\{1,\}/#define TENSTORRENT_DRIVER_VERSION_MAJOR ${MAJOR}/g" \
            -e "s/#define TENSTORRENT_DRIVER_VERSION_MINOR [0-9]\{1,\}/#define TENSTORRENT_DRIVER_VERSION_MINOR ${MINOR}/g" \
            -e "s/#define TENSTORRENT_DRIVER_VERSION_PATCH [0-9]\{1,\}/#define TENSTORRENT_DRIVER_VERSION_PATCH ${PATCH}/g" \
            module.h
          
          # Update module.h suffix for prerelease versions (e.g., -rc1)
          if [[ -n "${PRERELEASE}" ]]; then
            sed -i -e "s/#define TENSTORRENT_DRIVER_VERSION_SUFFIX \".*\"/#define TENSTORRENT_DRIVER_VERSION_SUFFIX \"-${PRERELEASE}\"/g" module.h
          else
            sed -i -e 's/#define TENSTORRENT_DRIVER_VERSION_SUFFIX ".*"/#define TENSTORRENT_DRIVER_VERSION_SUFFIX ""/g' module.h
          fi
          
          echo "Version files updated successfully"
      - name: Generate Debian/Ubuntu changelog
        run: |
          gbp dch \
            --debian-branch ${{ needs.create-temp-branch.outputs.temp_branch_ref }} \
            -R \
            -N ${{ inputs.version_string }} \
            --spawn-editor=never
      - name: Commit all version changes
        run: |
          git add \
            module.h \
            dkms.conf \
            AKMBUILD \
            debian/changelog
          git commit -m "TTKMD v${{ inputs.version_string }}"
          git push
      - name: Find New Git Hash
        id: new-git-hash
        run: |
          export git_hash_env="git_hash=$( git log --format="%H" -n 1 )"
          echo "${git_hash_env}"
          echo "${git_hash_env}" >> "$GITHUB_OUTPUT"

  # Build packages for all distributions
  build_all_depends:
    needs:
      - create-temp-branch
      - versionchange
    uses: ./.github/workflows/build-all.yml
    with:
      ref: ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
      MAJOR: ${{ needs.versionchange.outputs.version_major }}
      MINOR: ${{ needs.versionchange.outputs.version_minor }}
      PATCH: ${{ needs.versionchange.outputs.version_patch }}
      PRERELEASE: ${{ needs.versionchange.outputs.version_prerelease }}
      VERSION_FULL: ${{ needs.versionchange.outputs.package_version_new }}
      NUMBER_OF_COMMITS_SINCE_TAG: ${{ needs.versionchange.outputs.number_of_commits_since_tag }}
    secrets: inherit

  # Create and push the git tag for this release
  tagrelease:
    name: Tag the Release
    needs:
      - versionchange
      - build_all_depends
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.versionchange.outputs.git_hash }}
          fetch-tags: true
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"
      - name: Create and push tag
        run: |
          git tag -a ttkmd-${{ needs.versionchange.outputs.package_version_new }} -m "ttkmd-${{ needs.versionchange.outputs.package_version_new }}"
          git push --tags

  # Create draft GitHub release with build artifacts
  generate-release:
    name: Create GitHub Release
    needs:
      - create-temp-branch
      - versionchange
      - build_all_depends
      - tagrelease
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.versionchange.outputs.git_hash }}
          fetch-tags: true
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Find the deb, rpm & whl files
        run: |
          find ${GITHUB_WORKSPACE} -type f -iname \*.deb -o -iname \*.rpm -o -iname \*.whl -exec ls -lah {} \;
          find /home/runner/work/${{ env.project_name }}/${{ env.project_name }}/ -exec ls -lah {} \;

      - name: Deb file renames so they don't overlap
        run: |
          for x in $( \
            find ${GITHUB_WORKSPACE} -type f -iname \*.deb | \
            grep -v "artifacts-ubuntu" \
          )
          do
            want="$( \
              echo "${x}" | \
              xargs dirname | \
              tr "/" "\n" | \
              tail -n 1 \
              )"
            mv -v \
              "${x}" \
              "$( echo "${x}" | xargs dirname )/${want}"
          done

      - name: RPM file renames so they don't overlap
        run: |
          for x in $( \
            find ${GITHUB_WORKSPACE} -type f -iname \*.rpm | \
            grep -v "artifacts-fedora" \
          )
          do
            want="$( \
              echo "${x}" | \
              xargs dirname | \
              tr "/" "\n" | \
              tail -n 1 \
              )"
            mv -v \
              "${x}" \
              "$( echo "${x}" | xargs dirname )/${want}"
          done

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ttkmd-${{ needs.versionchange.outputs.package_version_new }}
          files: |
            ${{ github.workspace }}/${{ env.project_name }}*/*.deb
            ${{ github.workspace }}/tenstorrent-dkms*/*.deb
            ${{ github.workspace }}/[!artifacts-]*/*.deb
            ${{ github.workspace }}/tenstorrent-dkms*/*.rpm
            ${{ github.workspace }}/[!artifacts-]*/*.rpm
          body: ""
          draft: true
          prerelease: false

  # Merge the temporary branch back to main and clean up
  mergeback:
    needs:
      - create-temp-branch
      - generate-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Merge temp branch back to main
        run: |
          git log -3 --oneline
          git merge --ff-only origin/${{ needs.create-temp-branch.outputs.temp_branch_ref }}
          git log -3 --oneline
          git push
          git push origin --delete ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
